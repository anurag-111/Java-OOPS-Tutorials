TOPICS : EARLY BINDING, LATE BINDING, OVERLOADING, OVERRIDING.

EARLY BINDING :

Early binding, also known as static binding or compile-time binding,
refers to the process of linking a method call to the corresponding
method implementation at compile time. In early binding, the compiler
determines the appropriate method to be called based on the type of the
reference variable. The decision is made based on the static type of the
variable, which is determined at compile time.

class Shape {
    public void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    public void draw() {
        System.out.println("Drawing a circle");
    }
}

public class Main {
    public static void main(String[] args) {
        Shape shape = new Circle();
        shape.draw(); // Early binding
    }
}

Output:
Drawing a circle

In the early binding example, the draw() method of the Circle class is called,
even though the reference variable shape is of type Shape. This is because early
binding determines the appropriate method to call based on the static type of the
variable at compile time. In this case, the compiler knows that shape is of type
Shape, but it recognizes that it refers to an object of type Circle at runtime and
calls the overridden draw() method in the Circle class.

LATE BINDING :

Late binding, also known as dynamic binding or runtime binding, refers to the process of linking
a method call to the corresponding method implementation at runtime. In late binding, the decision
of which method to call is deferred until the program is executed and the actual type of the object is determined.

class Shape {
    public void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    public void draw() {
        System.out.println("Drawing a circle");
    }
}

public class Main {
    public static void main(String[] args) {
        Shape shape = getRandomShape();
        shape.draw(); // Late binding
    }

    public static Shape getRandomShape() {
        if (Math.random() < 0.5) {
            return new Shape();
        } else {
            return new Circle();
        }
    }
}

Output:
Drawing a circle

In the late binding example, the getRandomShape() method returns either a Shape
object or a Circle object randomly. At runtime, when shape.draw() is called,
the decision of which draw() method to execute is based on the actual type of
the object that shape refers to. In this case, if a Circle object is returned,
the overridden draw() method in the Circle class is called, resulting in the output "Drawing a circle".

OVERLOADING :

Overloading refers to the ability to define multiple methods in a class with the same
name but different parameters. The methods must differ in the number, type, or order of
the parameters. The compiler decides which method to call based on the arguments passed
during the method invocation.

Rules of Overloading :

   1. The return types can be different.
        -> You’re free to change the return types in
           overloaded methods, as long as the argument lists
           are different.

   2. You can’t change ONLY the return type.
        -> If only the return type is different, it’s not a
           valid overload—the compiler will assume
           you’re trying to override the method. And even
           that won’t be legal unless the return type is
           a subtype of the return type declared in the
           superclass. To overload a method, you MUST
           change the argument list, although you can
           change the return type to anything.

    3. You can vary the access levels in any direction.
       ->  You’re free to overload a method with a method
           that’s more restrictive. It does not matter, since the
           new method isn’t obligated to fulfill the contract of
           the overloaded method.

OVERRIDING :

Overriding, on the other hand, is the ability to provide a different implementation for a
method in a subclass that is already defined in its superclass. The method in the subclass
must have the same name, return type, and parameters as the method in the superclass. The
method in the subclass is said to override the method in the superclass.

Rules of Overriding:

    1. Arguments must be the same, and return types must be compatible.

    2. The method can’t be less accessible.
        -> That means the access level must be the same, or friendlier.
           That means you can’t, for example, override a public method
           and make it private.






